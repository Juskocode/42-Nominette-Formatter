name: 42-Norminette-Formatter CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy isort
        pip install -r requirements.txt
    
    - name: Run Black (Code Formatting)
      run: black --check --diff norminette_formatter/ tests/
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff norminette_formatter/ tests/
    
    - name: Run Flake8 (Linting)
      run: flake8 norminette_formatter/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (Type Checking)
      run: mypy norminette_formatter/ --ignore-missing-imports

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run Safety (Dependency Vulnerability Check)
      run: safety check
    
    - name: Run Bandit (Security Linting)
      run: bandit -r norminette_formatter/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout
    
    - name: Run Unit Tests
      run: |
        pytest tests/unit/ -v --tb=short --timeout=300 -n auto
    
    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: pytest-results.xml

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-unit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Norminette
      run: pip install norminette
    
    - name: Run Integration Tests
      run: |
        pytest tests/integration/ -v --tb=short --timeout=600
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: pytest-results.xml

  # Property-Based Tests
  test-property:
    name: Property-Based Tests
    runs-on: ubuntu-latest
    needs: [test-unit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Property-Based Tests
      run: |
        pytest tests/property/ -v --tb=short --timeout=900
    
    - name: Upload Property Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: property-test-results
        path: pytest-results.xml

  # Coverage Report
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov
    
    - name: Run Tests with Coverage
      run: |
        pytest --cov=norminette_formatter --cov-report=xml --cov-report=html tests/
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Dashboard Tests (Frontend)
  test-dashboard:
    name: Dashboard Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Frontend Dependencies
      run: |
        cd norminette_formatter/dashboard/static
        npm init -y
        npm install --save-dev jest jsdom
    
    - name: Run Frontend Tests
      run: |
        cd norminette_formatter/dashboard/static
        npm test || echo "Frontend tests not yet implemented"

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, security, test-unit, test-integration]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        EXPOSE 8080
        
        CMD ["python", "-m", "norminette_formatter", "dashboard", "--host", "0.0.0.0", "--port", "8080"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t norminette-formatter:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm norminette-formatter:latest python -c "import norminette_formatter; print('Import successful')"

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil
    
    - name: Run Performance Tests
      run: |
        python test_demo.py
        echo "Performance baseline established"

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, coverage]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
    
    - name: Deploy to PyPI (Test)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload --repository testpypi dist/* || echo "Test PyPI upload failed or already exists"
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, security, test-unit, test-integration, test-property, coverage, build]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.lint.result == 'success' && needs.security.result == 'success' && needs.test-unit.result == 'success' && needs.test-integration.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ All CI/CD checks passed successfully!"
        echo "🚀 Ready for deployment"
    
    - name: Notify Failure
      if: ${{ needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Some CI/CD checks failed"
        echo "🔍 Please review the failed jobs and fix the issues"
        exit 1